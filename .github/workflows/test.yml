name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Create environment files
      run: |
        echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_service" >> auth/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
        
        echo "RABBITMQ_URL=amqp://guest:guest@localhost:5672" >> product/.env
        echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_service" >> product/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
        echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
        echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env
        
        echo "RABBITMQ_URL=amqp://guest:guest@localhost:5672" >> order/.env
        echo "MONGODB_ORDER_URI=mongodb://localhost:27017/order_service" >> order/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> order/.env

    - name: Install dependencies
      run: |
        npm ci --prefix auth
        npm ci --prefix product
        npm ci --prefix order
        npm ci --prefix api-gateway

    - name: Wait for services to be ready
      run: |
        sleep 10

    - name: Run Auth Service tests
      run: npm test --prefix auth

    - name: Run Product Service tests
      run: |
        cd auth && npm start &
        sleep 5
        cd product && npm test

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build API Gateway
      run: docker build -t api-gateway:latest ./api-gateway

    - name: Build Auth Service
      run: docker build -t auth-service:latest ./auth

    - name: Build Product Service
      run: docker build -t product-service:latest ./product

    - name: Build Order Service
      run: docker build -t order-service:latest ./order

    - name: Verify Docker Compose
      run: docker-compose config

  deploy:
    name: Deploy (Optional)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy notification
      run: |
        echo "All tests passed!"
        echo "Docker images built successfully!"
        echo "Ready for deployment!"
