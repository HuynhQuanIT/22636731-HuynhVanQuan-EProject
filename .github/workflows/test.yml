name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout source code from repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies for auth service
      run: |
        cd auth
        npm install
    
    - name: Run auth service tests
      env:
        MONGODB_AUTH_URI: mongodb://localhost:27017/auth_service
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
      run: |
        cd auth
        npm test

  build-and-run:
    name: build-and-run
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout source code from repository
      uses: actions/checkout@v4
    
    - name: Build Docker images for all microservices
      run: docker compose build
    
    - name: Create environment variables file
      run: |
        echo "MONGODB_AUTH_URI=mongodb://mongodb:27017/auth_service" > .env.test
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.test
        echo "MONGODB_PRODUCT_URI=mongodb://mongodb:27017/product_service" >> .env.test
        echo "RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672" >> .env.test
        echo "MONGODB_ORDER_URI=mongodb://mongodb:27017/order_service" >> .env.test
        echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> .env.test
        echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> .env.test
    
    - name: Start all Docker containers
      run: docker compose up -d
    
    - name: Wait for services startup
      run: |
        echo "Waiting for services to be ready..."
        sleep 15
        docker compose ps
  
    - name: Check service health
      run: |
        echo "Checking all services are running..."
        docker compose ps
        echo "--- Auth Service Logs ---"
        docker compose logs --tail=20 auth
        echo "--- Product Service Logs ---"
        docker compose logs --tail=20 product
        echo "--- Order Service Logs ---"
        docker compose logs --tail=20 order
        echo "--- API Gateway Logs ---"
        docker compose logs --tail=20 api-gateway

    - name: Stop and remove containers after testing
      run: docker compose down -v

  deploys:
    name: deploys
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source code from repository
      uses: actions/checkout@v4
    
    - name: Rebuild Docker images for deployment
      run: docker compose build
    
    - name: Login to Docker Hub registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: List built images
      run: docker images
    
    - name: Tag and push images to Docker Hub
      run: |
        docker tag $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "auth" | head -1) ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest
        docker tag $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "product" | head -1) ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest
        docker tag $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "order" | head -1) ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest
        docker tag $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "api-gateway" | head -1) ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
